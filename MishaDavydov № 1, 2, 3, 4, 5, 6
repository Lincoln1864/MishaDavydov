# Практический курс по SQL для начинающих - #1 Введение в PostgreSQL
# Основные концепции: БД, СУБД
## Введение в базы данных
   Видео начинается с обсуждения важности изучения языков программирования и технологий, связанных с ними, для разработки приложений.
Затем автор переходит к обсуждению баз данных и их основных понятий, таких как хранилище данных и система управления базами данных (СУБД).
## Типы СУБД
   Автор объясняет различные типы СУБД, включая клиент-серверные, файл-серверные и встраиваемые СУБД.
Он также упоминает, что клиент-серверные СУБД являются самыми популярными и поддерживает язык структурированных запросов (SQL).
## Реляционные СУБД
Автор объясняет, что все клиент-серверные СУБД являются реляционными и поддерживает язык SQL.
Он также упоминает, что реляционные СУБД были доминирующими в течение нескольких десятилетий, но сегодня существуют и другие типы СУБД, такие как иерархические.
## Введение в реляционные базы данных
Видео начинается с обсуждения реляционных баз данных, которые были разработаны в 1970-х годах.
Реляционные базы данных основаны на реляционной алгебре, которая определяет систему операций над таблицами.
## Нереляционные базы данных
Видео переходит к обсуждению нереляционных баз данных, таких как NoSQL и NoSQL-сиквел.
Эти базы данных используют язык SQL и не реляционные модели данных.
## Реляционные базы данных
Видео возвращается к обсуждению реляционных баз данных и их теоретической основы - реляционной алгебры.
Реляционная алгебра определяет систему операций над таблицами, которые выражаются через язык SQL.
## Язык SQL
Видео обсуждает язык SQL, который используется для создания и обработки запросов к базам данных.
SQL является не процедурным языком и не языком общего назначения, но он заточен под выборку и обработку табличных данных.
## Интеграция с другими языками
Видео обсуждает возможность интеграции языка SQL с другими языками, такими как Python, Java и т.д.
Это позволяет использовать SQL для выполнения процедур и интеграции с другими языками программирования.
## Введение в язык SQL
Видео начинается с обсуждения важности изучения SQL для работы с базами данных.
SQL - это язык, который используется для управления данными в базах данных.
## История SQL
SQL был разработан в 1970-х годах для управления реляционными базами данных.
В 1992 году был выпущен стандарт ANSI SQL, который стал основой для всех современных диалектов SQL.
## Диалекты SQL
SQL имеет множество диалектов, которые поддерживают разные СУБД (системы управления базами данных).
Наиболее распространенными диалектами являются MySQL, PostgreSQL, Oracle, Microsoft SQL Server и Microsoft Access.
# Почему стоит выбрать PostgreSQL в качестве СУБД?
##  Выбор СУБД для изучения
В качестве первой СУБД для изучения рекомендуется использовать PostgreSQL, так как он бесплатный, открытый и имеет хорошую поддержку транзакций.
PostgreSQL также имеет развитый диалект, который может быть использован в других СУБД.
# Установка PostgreSQL
## Установка PostgreSQL
Видео демонстрирует процесс установки PostgreSQL на Windows и Linux.
После установки можно запустить инструмент PgAdmin для управления базой данных.
## Типы данных в PostgreSQL
Видео начинается с обсуждения типов данных в PostgreSQL, включая целые числа, вещественные числа, символы и даты.
В видео также обсуждаются различные типы данных, такие как целые числа, вещественные числа и символы, а также их использование в базах данных.
# Обзор типов данных в PostgreSQL
## Создание базы данных и таблиц
Видео переходит к обсуждению создания базы данных и таблиц в PostgreSQL.
В видео также рассматриваются различные типы данных, которые могут быть использованы в базах данных, включая целые числа, вещественные числа и символы.
## Специальные значения и нал
Видео завершается обсуждением специальных значений, таких как нал, и их использования в базах данных.
В видео также упоминается, что нал представляет собой отсутствие данных и не является пустой строкой или нулем.
## Создание базы данных
Создание базы данных с использованием языка сквель
Создание таблиц внутри базы данных
#  Как создать таблицу в БД 
## Первичные ключи и типы данных
Первичные ключи для определения уникальности строк
Типы данных для столбцов таблиц
## Создание таблиц с использованием языка сквель
Создание таблиц с использованием редактора запросов
Создание таблиц с использованием пользовательского интерфейса пиджи эдмин
# Отношение "один ко многим"
## Примеры таблиц
  Создание таблицы с названием "паблишер"
  Создание таблицы с названием "бук"
## Первичные ключи и ограничения
  Создание первичных ключей для определения уникальности строк
  Ограничения для столбцов таблиц
## Создание таблиц и колонок
  Создание таблиц с помощью команды дроб тейбл
  Выбор схемы для добавления таблицы
  Добавление колонок с помощью команды дроб тейбл паблишер
# Отношение "один к одному" в теории
## Вставка данных
  Вставка данных в таблицы с помощью команды инсерт инто
  Пример вставки данных в таблицы
## Объединение таблиц
  Создание внешних ключей для объединения таблиц
  Добавление колонки с внешним ключом и указание на другую таблицу
  Создание таблицы с внешними ключами и данными о издателях
## Модификация таблицы
  Использование команды альтер тейбл для изменения таблицы
  Добавление колонки с внешним ключом и указание на другую таблицу
  Обновление значений в колонке с внешним ключом
## Создание таблиц и колонок
  Создание таблицы с колонками, которые ссылаются на другие таблицы
  Добавление данных в таблицу с использованием внешнего ключа
## Отношения между таблицами
  Примеры отношений один ко многим, один к одному и многие ко многим
  Создание таблиц с разными видами отношений
## Объединение таблиц с помощью внешнего ключа
  Объединение таблиц с использованием синтаксиса SQL
  Демонстрация объединения таблиц с разными видами отношений
# Создаём БД Northwind
## Создание таблиц и связей
  Создание таблиц с первичными ключами и внешними ключами
  Объяснение отношений многие ко многим между таблицами
## Примеры запросов
  Примеры запросов для определения авторов книг и соавторов книг
## Создание тестовой базы данных
  Создание таблиц и связей в тестовой базе данных
  Демонстрация работы с таблицами и связями
# Создаём БД Northwind
## Заключение
  Демонстрация создания таблиц и связей в учебной базе данных
  Переход к использованию поддерживаемого пост для изучения сквил




# Практический курс по SQL для начинающих - #2 Базовые SELECT запросы
# Полная выборка данных с SELECT
## Введение
В этом видео мы рассмотрим основы написания запросов на языке Сквер.
Мы будем использовать базу данных Норс для тренировки.
## Селект звездочка
Селект звездочка позволяет выбрать все колонки из таблицы.
Однако, это может быть неэффективно, так как серверу приходится обрабатывать много данных.
# Выборка и простая арифметика в SQL
## Использование математических операций
В Скверли поддерживаются различные математические операции, такие как сложение, вычитание, умножение, деление и вычисление квадратного корня.
# Использование DISTINCT в запросах
## Дистинкт
Дистинкт позволяет выводить уникальные строки из выборки.
Он может быть использован для фильтрации дубликатов и вывода уникальных значений.
## Примеры использования
Мы рассмотрим примеры использования дистинкта для фильтрации городов и стран.
Мы также увидим, как использовать дистинкт для фильтрации уникальных значений по двум колонкам.
## Введение
В видео рассказывается о функциях и операторах языка SQL, которые позволяют работать с данными в таблицах.
Рассматриваются функции, которые позволяют считать количество строк, выводить уникальные значения и фильтровать данные.
## Функция COUNT
Функция COUNT позволяет считать количество строк в результирующем наборе.
Можно передавать звездочку для подсчета всех строк или конкретные столбцы.
## Функция AVG
Функция AVG позволяет считать среднее значение столбца.
Можно использовать для расчета среднего возраста, например.
## Функция COUNTIF
Функция COUNTIF позволяет считать количество строк, удовлетворяющих условию.
Можно использовать для подсчета количества заказов, выполненных за определенный период времени.
# Использование COUNT в запросах
## Функция AVGIF
Функция AVGIF позволяет считать среднее значение столбца, удовлетворяющего условию.
Можно использовать для расчета средней цены заказа, например.
## Введение
В видео рассказывается о том, как использовать логические операторы в запросах на выборку данных в базе данных.
Рассматриваются примеры использования логических операторов и их применение в различных ситуациях.
23:40 Примеры использования логических операторов
Демонстрируются примеры использования логических операторов для фильтрации данных по определенным условиям.
Обсуждаются различные варианты использования логических операторов и их влияние на результирующий набор данных.
# AND и OR
## Заключение
В этой части видео обсуждаются ключевые слова, которые могут быть использованы после условия "уэр".
Рассматриваются примеры использования этих ключевых слов для более сложных запросов.
## Задания и примеры
В этом разделе видео приводятся примеры выполнения заданий, связанных с использованием логических операторов.
Демонстрируются различные варианты использования логических операторов для фильтрации данных и получения результирующего набора.
##  Использование оператора "или"
В данном видео рассматривается использование оператора "или" для фильтрации заказов, отгруженных после 30 апреля 1998 года и имеющих вес отгрузки меньше 75 или больше 150.
Оператор "или" используется для объединения условий, и если хотя бы одно из них выполняется, то строка попадает в результирующий набор.
# BETWEEN
##  Использование оператора "между"
В данном видео демонстрируется использование оператора "между" для получения диапазона значений.
Оператор "между" включает верхнюю и нижнюю границы, и его использование может упростить код.
# IN, NOT IN
## Логический оператор "ин"
В данном видео рассматривается использование логического оператора "ин" для фильтрации кастомеров из стран Мексики, Германии, США и Канады.
Оператор "ин" позволяет перечислить список значений, которые нужно найти, и делает код более читабельным.
## Логический оператор "нот"
В данном видео демонстрируется использование логического оператора "нот" для фильтрации кастомеров, находящихся не в указанных странах.
Оператор "нот" используется вместе с оператором "ин" для реверсирования логики.
# Сортировка с ORDER BY
## Упорядочивание результатов
В данном видео автор обсуждает упорядочивание результатов в SQL запросах. Он приводит пример запроса, который находит все страны, из которых были сделаны заказы, и сортирует их по возрастанию.
Затем автор показывает, как можно использовать функцию "order by" для сортировки результатов по нескольким столбцам.
# Вычисление минимума, максимума и среднего: MIN, MAX, AVG
## Скалярные функции
В этой части видео автор обсуждает использование скалярных функций для вычисления минимального, максимального и среднего значения.
Он приводит примеры использования этих функций в запросах для нахождения самого старого и самого нового заказа, а также для вычисления средней цены всех продуктов.
# ДЗ 2 "Простые выборки", ДЗ 2 "Простые выборки"
## Домашнее задание
В этой части автор решает домашнее задание, которое включает в себя поиск всех заказов из Франции, Австрии и Испании, сортировку их по дате доставки и вычисление минимальной и максимальной цены для продуктов, которые находятся в продаже более 30 штук.
Он также обсуждает, как можно вычислить среднее количество дней, которые уходят на отгрузку товара, начиная с даты формирования заказа.
## Вычисление полной суммы
В данном видео рассматривается задача вычисления полной суммы, на которой продаются продукты с учетом их количества в продаже.
Для этого используется функция сам, которая вычисляет сумму после перемножения юнит прайс на юнитс инсток.
# LIKE в запросах для поиска строк
## Использование ключевого слова лайк
В данном видео объясняется использование ключевого слова лайк для составления шаблонов в эквиль.
Рассматриваются различные примеры использования этого ключевого слова, включая поиск всех сотрудников, имя которых заканчивается на "н", и всех телефонных номеров, которые начинаются с "плюс семь".
# LIMIT 
##  Использование ключевого слова лимит
В данном видео рассказывается о ключевом слове лимит, которое используется для ограничения количества записей, которые будут выведены в результате запроса.
Приводится пример использования лимита для вывода только первых десяти записей из таблицы.
# Проверка на NULL: IS NULL, IS NOT NULL
## Работа с значением нал
В данном видео объясняется, как работать с значением нал в запросах.
Рассматривается пример фильтрации записей, где шип риджин равен нал, и фильтрации записей, где шип риджин не равен нал.
# Группировка GROUP BY
## Группировка и фильтрация
В данном видео рассматривается структурная часть запроса - группировка.
Пример: посчитать количество заказов, вес которых превышает 50 кг, сгруппировав по странам.
## Постфильтрация
После группировки и фильтрации может понадобиться наложить фильтр еще раз.
Пример: посчитать сумму товаров, продаваемых в определенной категории, сгруппировав по категории и применив агрегатную функцию.
# Пост фильтрация с HAVING
## Объединение, пересечение и исключение
Объединение: объединение результатов двух запросов без удаления дубликатов.
Пересечение: выбор стран-заказчиков, из которых происходят страны-саплаеры.
Исключение: выбор стран-заказчиков, из которых не происходят страны-саплаеры.
## Операции над множествами
В видео обсуждаются операции над множествами, такие как исключение, объединение, пересечение и разность.
Примеры использования этих операций для решения задач, связанных с заказами, странами и сотрудниками.
# Объединение, пересечение, разница в SQL - UNION, INTERSECT, EXCEPT
## Домашние задания
Примеры выполнения домашних заданий, связанных с использованием различных операций над множествами.
Задания включают поиск заказов, которые отгружаются в страны, начинающиеся с заглавной Ю, и заказов, которые поставляются в страны, названия которых начинаются с заглавной Н.
# ДЗ "Группировка, сопоставление, сортировка", ДЗ "Группировка, сопоставление, сортировка" - Решение
## Подсчет количества заказов и сотрудников
Примеры использования скалярной функции для подсчета количества заказов и сотрудников с определенным регионом.
## Использование операций над множествами
Примеры использования операций над множествами для решения задач, связанных с объединением, пересечением и исключением стран, из которых происходят заказчики, саплаеры и работники.
## Заключение
Подведение итогов по использованию операций над множествами для решения различных задач.





# Практический курс по SQL для начинающих - #3 Соединения (JOIN)
# Введение в SQL джойны
## Введение в соединения в SQL
• Видео начинается с объяснения темы соединений в SQL, которые позволяют объединять данные из разных таблиц.
• Рассматриваются различные типы соединений: внутреннее соединение (иннер джойн), внешнее соединение (лефт аутер джойн, райт аутер джойн) и полное соединение (фул джойн).
## Примеры соединений
• Демонстрируются примеры соединений с использованием таблиц "паблишер" и "бук".
• Объясняется, как работают различные типы соединений, включая внутреннее соединение, внешнее соединение и полное соединение.
## Практические примеры
• Рассматриваются практические примеры использования соединений для объединения данных из разных таблиц.
• Обсуждаются различия между лефт аутер джойн и райт аутер джойн, а также между фул джойн и кросс джойн.
 # Внутреннее соединение (джойн) - INNER JOIN
##  Введение
• В видео обсуждается использование внешних соединений в SQL.
• Внешние соединения позволяют объединять данные из нескольких таблиц, используя общие ключи.
## Заключение
• В заключение видео автор предлагает изучить синтаксис соединений и рассмотреть примеры более сложных запросов.
## Примеры внешних соединений
• Объединяются данные из двух таблиц, чтобы получить информацию о товарах и их категориях.
• В результате получается результирующий набор с колонками товара, категории и суммы продаж.
## Использование энер-джойна
• Энер-джойн используется для объединения данных из нескольких таблиц, чтобы получить информацию о заказах и их связях с работниками.
Внешние соединения (джойны) - LEFT, RIGHT JOIN
## Использование лефт-джойна
• Лефт-джойн используется для определения компаний, на которых нет заказов.
• В результате получается результирующий набор с колонками компании и заказов.
## Заключение
• Внешние соединения являются важным инструментом для работы с данными в SQL.
• В видео были рассмотрены примеры использования внешних соединений и их отличия от внутренних соединений.
## Введение в соединения в SQL
• Видео начинается с объяснения того, что такое соединения в SQL и как они работают.
• Автор объясняет, что соединения могут быть внешними, внутренними и самосоединениями.
## Примеры соединений
• Автор приводит примеры внешних соединений, используя таблицу заказов и таблицу работников.
• Он также объясняет, что левые и правые соединения имеют одинаковый смысл, но разные направления следования таблиц.
# Рекурсивное соедиенение (джойн) - SELF JOIN
## Примеры самосоединений
• Автор приводит пример самосоединения, где таблица работников имеет внешний ключ, ссылающийся на себя.
• Он объясняет, что селф-джоин используется для построения иерархических связей между данными.
# USING & NATURAL JOIN
## Сокращение кода с помощью синтаксического сахара
• Автор показывает, как можно сократить код с помощью ключевого слова "using" и "join by".
• Он также упоминает о потенциальной проблеме использования "join by" и предлагает использовать "using" вместо него.
## Использование псевдонимов в запросах
• Обсуждается использование псевдонимов в запросах для упрощения кода и улучшения читаемости.
• Псевдонимы могут быть использованы для проименования колонок, которые иначе были бы проименованы автоматически.
# Псевдонимы с помощью AS
## Использование псевдонимов с агрегатными функциями
• Псевдонимы могут быть использованы с агрегатными функциями, такими как сумма, для упрощения кода.
# ДЗ "JOINS", ДЗ "JOINS" - Решение
## Использование псевдонимов с под-запросами
• Псевдонимы обязательны для использования с под-запросами, чтобы избежать неоднозначных ссылок на колонки.
## Решение домашних заданий по джойнам
• Примеры решения домашних заданий, связанных с использованием джойнов, таких как поиск активных продуктов, заказчиков, не сделавших ни одного заказа, и переписка запросов с использованием симметричного вида джойна.



# Практический курс по SQL для начинающих - #4 Подзапросы в SQL
# Введение в SQL подзапросы
## Введение в под-запросы
• В этом видео мы рассмотрим тему под-запросов в PostgreSQL.
• Под-запросы могут быть полезными, когда запросы становятся сложными или когда невозможно решить задачу без использования под-запросов.
## Примеры использования под-запросов
• Пример 1: Найти все компании-поставщики из стран, в которые делают заказы заказчики.
• Пример 2: Вывести сумму единиц товара, разбитых на группы, и ограничить результирующий набор числом, которое нужно вычислить.
• Пример 3: Вывести товары, количество которых в наличии больше, чем в среднем.
## Синтаксис под-запросов
• Под-запросы могут находиться в разных частях запроса после ключевых слов.
• Под-запросы могут быть использованы для вычисления значений, которые затем используются в основном запросе.
# WHERE EXISTS
## Заключение
• В следующей лекции мы продолжим изучать под-запросы, используя конструкцию у-экзист с под-запросом внутри.
## Объединение таблиц с помощью УЭР
• Объединяем таблицы с помощью УЭР, используя условие, что для каждой записи из таблицы CUSTOMERS существует хотя бы одна запись из таблицы ORDERS, удовлетворяющая условию.
 Выбор компаний и их заказов
• Выбираем компании и заказы, которые были сделаны между 1 февраля 1995 года и 15 февраля 1995 года.
## Выбор продуктов, которые не покупались
• Выбираем продукты, которые не были куплены в период с 1 февраля 1995 года по 15 февраля 1995 года.
# Подзапросы с квантификаторами ANY, ALL
## Выбор уникальных компаний-заказчиков
• Выбираем уникальные компании-заказчики, которые сделали заказы на более чем 40 единиц товаров.
## Выбор продуктов, количество которых больше среднего
• Выбираем продукты, количество которых больше среднего по заказам.
## Использование ключевого слова ЭНИ
• Ключевое слово ЭНИ используется для выбора записей, которые совпадают с записями из под-запроса.
## Использование ключевого слова ОЛ
• Ключевое слово ОЛ используется для выбора записей, удовлетворяющих количественному ограничению.
## Введение в под запросы
• В видео рассказывается о под запросах и их использовании в SQL.
• Под запросы позволяют получить среднее значение количества заказанных товаров по группам, разбитым по продакт-айди.
## Примеры под запросов
• Пример 1: Найти продукты, количество которых больше среднего значения.
• Пример 2: Вывести общую сумму фрахтов заказов для компаний-заказчиков.
• Пример 3: Вывести три заказа с наибольшей стоимостью, созданные после первого сентября 1997 года и доставленные в страны Южной Америки.
• Пример 4: Вывести все товары или уникальные наименования продуктов, в которых заказано ровно десять единиц.
# ДЗ "SQL подзапросы", ДЗ "SQL подзапросы" - Решение
## Домашнее задание по под запросам
• Задание 1: Вывести продукты, количество которых в продаже меньше самого малого среднего количества продуктов в деталях заказов.
• Задание 2: Написать запрос, который выводит общую сумму фрахтов заказов для компаний-заказчиков.
• Задание 3: Написать запрос, который выводит три заказа с наибольшей стоимостью, созданные после первого сентября 1997 года и доставленные в страны Южной Америки.
• Задание 4: Вывести все товары или уникальные наименования продуктов, в которых заказано ровно десять единиц.



# Практический курс по SQL для начинающих - #5 DDL: создание БД, таблиц и их модификация
# Управляем таблицами: создание, изменение, удаление
## Введение в ддль
• В данном разделе курса изучается язык изэль и его часть ддль, которая позволяет манипулировать данными в базе данных.
• Рассматриваются команды крей тейбл, альтер тейбл, дроп колун и другие, которые позволяют создавать, изменять, удалять и переименовывать таблицы и столбцы.
## Примеры использования ддль
• Создаются и переименовываются таблицы, добавляются и удаляются столбцы, а также переименовываются столбцы.
• Демонстрируется использование команды дроп колун для удаления столбцов и команды транкейт тейбл для удаления данных из таблиц.
## Заключение
• В данной части курса будет рассмотрен тип данных факти, который работает как интеджер, но добавляет функционал автоинкремента.
• Также будет обсуждаться команда инсерт, которая используется для добавления данных в таблицы.
## Создание таблиц и данных
• Создание таблиц с использованием скрипта и юзер-интерфейса
• Рестарт адентти для автоматического создания автоинкрементных полей
## Удаление таблиц и данных
• Использование команды дроб тейбл для удаления таблиц
• Проверка отсутствия таблицы после удаления
# ДЗ 1 по DDL, ДЗ 1 по DDL - Решение
## Решение домашнего задания
• Создание таблиц и добавление данных с использованием скрипта и юзер-интерфейса
• Удаление и переименование колонок, установка длины поля
# Как создать первичный ключ в SQL (PRIMARY KEY)
## Работа с ограничениями
• Создание таблиц с ограничениями уникальности и уникальности и нал
• Сравнение праймер реки и юник нот нал ключей
## Работа с ограничениями в MySQL
• В видео рассказывается о работе с ограничениями в MySQL, таких как имена, которые даны ограничениям, и как их можно вывести.
• Обсуждается синтаксис для добавления и удаления ограничений, а также примеры использования ограничений для внешних ключей и логических условий.
# Как создать внешний ключ в SQL (FOREIGN KEY)
## Создание и удаление ограничений
• Создается подключение к тестовой базе данных и создаются таблицы с ограничениями.
• Обсуждаются примеры использования ограничений для создания внешних ключей и логических условий.
# DEFAULT - значения по умолчанию
## Ограничения дефолт
• Обсуждаются ограничения дефолт, которые используются для автоматического заполнения значений по умолчанию в столбцах.
• Демонстрируется пример создания таблицы с ограничением дефолт и проверка его работы.
## Удаление ограничений дефолт
• Демонстрируется синтаксис для удаления ограничений дефолт и примеры его использования.
# Последовательности в PostgreSQL - CREATE SEQUENCE
## Введение в последовательности
• В видео рассказывается о последовательностях в PostgreSQL, которые основаны на скусах (последовательности).
• Показывается, как создавать и манипулировать последовательностями, используя функции set- и next-value.
# Последовательности и таблицы - SERIAL
## Последовательности и таблицы
• Обсуждается использование последовательностей в контексте работы с таблицами.
• Демонстрируется, как создать последовательность и назначить ее на поле таблицы.
## Проблемы с псевдотипом сериал
• Обсуждаются проблемы, связанные с использованием псевдотипа сериал, такие как возможность изменения значений и нарушение ограничений уникальности.
## Новый синтаксис для создания полей с автоинкрементом
• Вводится новый синтаксис для создания полей с автоинкрементом, который появился в PostgreSQL с версии 10.
• Демонстрируется использование нового синтаксиса на примере создания поля с автоинкрементом типа сериал.
## Работа с таблицами
• В видео обсуждается использование нового синтаксиса для создания автоинкрементируемых счетчиков.
• Новый синтаксис позволяет запретить явное вставление значений в колонку и использовать только автоинкремент.
# INSERT - Вставка данных в таблицу на SQL
## Работа с инсертами
• В видео демонстрируется вставка данных в таблицы с использованием синтаксиса инсерта.
• Обсуждаются возможности вставки данных по всем столбцам или только по некоторым из них.
## Создание и обновление таблиц
• В видео рассматриваются команды апдейта и делита для создания и обновления таблиц.
• Обсуждается использование команды ретернинг для возврата данных по модифицированной строке после выполнения команды.
# UPDATE, DELETE, RETURNING - обновление и удаление данных из таблицы на SQL
## Создание таблиц и отношений
• Создание таблицы "бук" с автоинкрементируемым полем "айди"
• Использование ретернинга для возврата сгенерированного айди
## Удаление и обновление данных
• Удаление строки с айди "пять" и использование ретернинга для возврата удаленных данных
• Обновление строки с айди "один" и использование ретернинга для возврата обновленных данных
# ДЗ 2 по DDL, ДЗ 2 по DDL - Решение
## Создание таблиц "персон" и "паспорт"
• Создание таблиц "персон" и "паспорт" с соответствующими отношениями
## Изменение таблицы "бук"
• Добавление колонки "уэйт вес" и установка ограничения, что вес книги должен быть больше нуля и меньше ста
## Добавление проверки в таблице "продакт"
• Добавление проверки на то, что "прайс" должен быть больше нуля
## Создание таблицы "студент"
• Создание таблицы "студент" с автоинкрементируемым полем "грейд"
• Удаление ограничения дефолт и установка дефолта на единицу
## Модификация колонки "продакт" в базе данных "норд"
• Создание сиквенса и нот-экзиста для автоинкрементирования поля "продакт айди"
• Установка ограничения дефолт некст вел и использование ретернинга для возврата сгенерированного айди




# Практический курс по SQL для начинающих - #6 Проектирование и нормализация Базы Данных (БД)
# Введение в процесс проектирование базы данных (БД)
## Проблемы проектирования баз данных
• Видео обсуждает проблемы проектирования баз данных, включая необходимость понимания предметной области и отражения логических взаимосвязей между объектами.
• Проектирование баз данных может быть сложным процессом, требующим глубокого анализа и понимания предметной области.
## Стадии проектирования баз данных
• В процессе проектирования баз данных выделяются три стадии: анализ требований предметной области, логическое моделирование данных и физическое проектирование и нормализация.
• Анализ требований включает в себя понимание сценариев использования и целеполагания субъектов в предметной области.
## Логическое проектирование
• Логическое проектирование детализирует концептуальную модель базы данных, определяет ключи и типы данных, а также логические ограничения.
• Логические ограничения могут быть выявлены только по мере углубления в предметную область и разработки программного обеспечения.
## Нормализация отношений между таблицами
• Нормализация отношений между таблицами обычно проводится до формы третьей нормальной формы, но может быть и меньше.
# Рекомендации, лучшие и худшие практики по проектированию базы данных (БД)
## Введение
• В видео обсуждается процесс проектирования баз данных, который включает в себя нормализацию отношений между таблицами, выбор конкретной СУБД, определение типов данных и индексов, ограничений доступа и конвенций именования.
## Базовые советы по проектированию
• Избегайте полного игнорирования нормализации, отсутствия стандартов именования, создания таблиц для разных по смыслу данных, наплевательского отношения к актуальности данных и использования вычислимых полей.
• Избегайте использования первичных ключей, таких как ИНН, серия номера паспорта и композитных первичных ключей.
• Старайтесь использовать суррогатные и натуральные ключи, чтобы пользователь мог выбрать строку, используя натуральный ключ.
## Нормализация данных
• В следующей лекции будет обсуждаться нормализация данных, которая является важной частью процесса проектирования баз данных.
# Нормальные формы и нормализация базы данных (БД): первая нормальная форма, вторая нормальная форма, третья нормальная форма
## Нормальные формы и нормализация данных
• Нормальная форма - свойство отношения или таблицы, характеризующее ее с точки зрения избыточности данных
• Нормализация - процесс минимизации избыточности данных в отношении, приведение его к нормальной форме
## Первая нормальная форма
• Первая нормальная форма: в отношении или таблице не должно содержаться строк-дубликатов, все атрибуты должны быть простых типов данных и все значения скалярные
• Пример: таблица с двумя колонками "автор" и "книги", которые он издал
• Разделение таблицы на три строки для Льва Толстого и три строки для Федора Достоевского
## Вторая нормальная форма
• Вторая нормальная форма: таблица должна удовлетворять всем требованиям первой нормальной формы и иметь первичный ключ
• Пример: добавление колонок "издатель" и "контакт издателя"
• Решение: создание отдельной таблицы "издатель" с первичным ключом и ссылка на нее из таблицы "книги" через внешний ключ
## Третья нормальная форма
• Третья нормальная форма: таблица должна удовлетворять второй нормальной форме и не иметь зависимостей одних не ключевых атрибутов от других
• Пример: колонка "издатель" зависит от колонки "издатель"
• Решение: создание отдельной таблицы "издатель" с первичным ключом и ссылка на нее из таблицы "книги" через внешний ключ
## Де-нормализация данных
• Де-нормализация данных может быть необходима для повышения производительности селектов
• Решение: де-нормализация данных только на практике, в процессе эксплуатации
